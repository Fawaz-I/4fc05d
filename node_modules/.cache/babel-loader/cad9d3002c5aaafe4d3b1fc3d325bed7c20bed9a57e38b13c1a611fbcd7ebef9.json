{"ast":null,"code":"var _jsxFileName = \"/Users/fawaz/dev/4fc05d/src/components/JourneyGraph/JourneyGraph.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useCallback } from 'react';\nimport ReactFlow, { Background, Controls, ReactFlowProvider, ConnectionLineType, applyNodeChanges } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport FormNode from './FormNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JourneyGraph = ({\n  data,\n  onNodeSelect,\n  selectedNodeId\n}) => {\n  _s();\n  // Convert API nodes to React Flow nodes\n  const initialNodes = useMemo(() => {\n    return data.nodes.map(node => {\n      var _data$forms$find;\n      return {\n        id: node.id,\n        position: node.position,\n        data: {\n          ...node.data,\n          label: ((_data$forms$find = data.forms.find(form => form.id === node.id)) === null || _data$forms$find === void 0 ? void 0 : _data$forms$find.name) || node.id,\n          isSelected: node.id === selectedNodeId\n        },\n        type: node.type === 'form' ? 'form' : 'default'\n      };\n    });\n  }, [data, selectedNodeId]);\n  const [nodes, setNodes] = useState(initialNodes);\n\n  // Update nodes when data or selection changes\n  React.useEffect(() => {\n    setNodes(initialNodes.map(node => ({\n      ...node,\n      data: {\n        ...node.data,\n        isSelected: node.id === selectedNodeId\n      }\n    })));\n  }, [initialNodes, selectedNodeId]);\n\n  // Convert API edges to React Flow edges\n  const edges = useMemo(() => {\n    return data.edges.map((edge, index) => ({\n      id: `edge-${index}`,\n      source: edge.source,\n      target: edge.target,\n      type: 'smoothstep',\n      animated: false\n    }));\n  }, [data]);\n\n  // Register custom node types\n  const nodeTypes = useMemo(() => ({\n    form: FormNode\n  }), []);\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => applyNodeChanges(changes, nds));\n  }, [setNodes]);\n  const handleNodeClick = (_event, node) => {\n    if (node.type === 'form') {\n      onNodeSelect(node.id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '600px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        nodeTypes: nodeTypes,\n        onNodesChange: onNodesChange,\n        onNodeClick: handleNodeClick,\n        connectionLineType: ConnectionLineType.SmoothStep,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(JourneyGraph, \"zKEk2dD1lF2OGdN4m1j+lMeNw2Y=\");\n_c = JourneyGraph;\nexport default JourneyGraph;\nvar _c;\n$RefreshReg$(_c, \"JourneyGraph\");","map":{"version":3,"names":["React","useMemo","useState","useCallback","ReactFlow","Background","Controls","ReactFlowProvider","ConnectionLineType","applyNodeChanges","FormNode","jsxDEV","_jsxDEV","JourneyGraph","data","onNodeSelect","selectedNodeId","_s","initialNodes","nodes","map","node","_data$forms$find","id","position","label","forms","find","form","name","isSelected","type","setNodes","useEffect","edges","edge","index","source","target","animated","nodeTypes","onNodesChange","changes","nds","handleNodeClick","_event","children","style","width","height","onNodeClick","connectionLineType","SmoothStep","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fawaz/dev/4fc05d/src/components/JourneyGraph/JourneyGraph.tsx"],"sourcesContent":["import React, { useMemo, useState, useCallback } from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  ReactFlowProvider,\n  Edge as ReactFlowEdge,\n  Node as ReactFlowNode,\n  ConnectionLineType,\n  OnNodesChange,\n  applyNodeChanges,\n  NodeChange,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { BlueprintGraphResponse } from '../../types';\nimport FormNode from './FormNode';\n\ninterface JourneyGraphProps {\n  data: BlueprintGraphResponse;\n  onNodeSelect: (nodeId: string) => void;\n  selectedNodeId: string | null;\n}\n\nconst JourneyGraph: React.FC<JourneyGraphProps> = ({\n  data,\n  onNodeSelect,\n  selectedNodeId,\n}) => {\n  // Convert API nodes to React Flow nodes\n  const initialNodes: ReactFlowNode[] = useMemo(() => {\n    return data.nodes.map((node) => ({\n      id: node.id,\n      position: node.position,\n      data: {\n        ...node.data,\n        label: data.forms.find((form) => form.id === node.id)?.name || node.id,\n        isSelected: node.id === selectedNodeId,\n      },\n      type: node.type === 'form' ? 'form' : 'default',\n    }));\n  }, [data, selectedNodeId]);\n\n  const [nodes, setNodes] = useState<ReactFlowNode[]>(initialNodes);\n\n  // Update nodes when data or selection changes\n  React.useEffect(() => {\n    setNodes(\n      initialNodes.map((node) => ({\n        ...node,\n        data: {\n          ...node.data,\n          isSelected: node.id === selectedNodeId,\n        },\n      }))\n    );\n  }, [initialNodes, selectedNodeId]);\n\n  // Convert API edges to React Flow edges\n  const edges: ReactFlowEdge[] = useMemo(() => {\n    return data.edges.map((edge, index) => ({\n      id: `edge-${index}`,\n      source: edge.source,\n      target: edge.target,\n      type: 'smoothstep',\n      animated: false,\n    }));\n  }, [data]);\n\n  // Register custom node types\n  const nodeTypes = useMemo(() => ({ form: FormNode }), []);\n\n  const onNodesChange: OnNodesChange = useCallback(\n    (changes: NodeChange[]) => {\n      setNodes((nds) => applyNodeChanges(changes, nds));\n    },\n    [setNodes]\n  );\n\n  const handleNodeClick = (_event: React.MouseEvent, node: ReactFlowNode) => {\n    if (node.type === 'form') {\n      onNodeSelect(node.id);\n    }\n  };\n\n  return (\n    <ReactFlowProvider>\n      <div style={{ width: '100%', height: '600px' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          nodeTypes={nodeTypes}\n          onNodesChange={onNodesChange}\n          onNodeClick={handleNodeClick}\n          connectionLineType={ConnectionLineType.SmoothStep}\n          fitView\n        >\n          <Background />\n          <Controls />\n        </ReactFlow>\n      </div>\n    </ReactFlowProvider>\n  );\n};\n\nexport default JourneyGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}