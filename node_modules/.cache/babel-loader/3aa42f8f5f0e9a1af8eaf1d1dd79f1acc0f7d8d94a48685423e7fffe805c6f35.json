{"ast":null,"code":"// src/services/prefillService.ts\n\n/**\n * Get display text for a mapping\n */\nexport const getDisplayText = mapping => {\n  if (mapping.sourceType === 'global') {\n    return `Global: ${mapping.sourceField}`;\n  } else {\n    return `Form: ${mapping.sourceFormId}.${mapping.sourceField}`;\n  }\n};\n\n/**\n * Add or update a mapping\n */\nexport const updateMapping = (mappings, targetFormId, targetField, sourceType, sourceFormId, sourceField) => {\n  const updatedMappings = [...mappings];\n\n  // Find if we already have mappings for this form\n  const formMappingIndex = updatedMappings.findIndex(m => m.targetFormId === targetFormId);\n  if (formMappingIndex >= 0) {\n    const formMapping = {\n      ...updatedMappings[formMappingIndex]\n    };\n\n    // Find if we already have a mapping for this field\n    const fieldMappingIndex = formMapping.mappings.findIndex(m => m.targetField === targetField);\n    const newFieldMapping = {\n      targetField,\n      sourceType,\n      sourceFormId,\n      sourceField,\n      displayText: sourceType === 'global' ? `Global: ${sourceField}` : `Form: ${sourceFormId}.${sourceField}`\n    };\n    if (fieldMappingIndex >= 0) {\n      // Update existing field mapping\n      const updatedMappings = [...formMapping.mappings];\n      updatedMappings[fieldMappingIndex] = newFieldMapping;\n      formMapping.mappings = updatedMappings;\n    } else {\n      // Add new field mapping\n      formMapping.mappings = [...formMapping.mappings, newFieldMapping];\n    }\n    updatedMappings[formMappingIndex] = formMapping;\n  } else {\n    // Add new form mapping\n    updatedMappings.push({\n      targetFormId,\n      mappings: [{\n        targetField,\n        sourceType,\n        sourceFormId,\n        sourceField,\n        displayText: sourceType === 'global' ? `Global: ${sourceField}` : `Form: ${sourceFormId}.${sourceField}`\n      }]\n    });\n  }\n  return updatedMappings;\n};\n\n/**\n * Remove a mapping\n */\nexport const removeMapping = (mappings, targetFormId, targetField) => {\n  const updatedMappings = [...mappings];\n  const formMappingIndex = updatedMappings.findIndex(m => m.targetFormId === targetFormId);\n  if (formMappingIndex >= 0) {\n    const formMapping = {\n      ...updatedMappings[formMappingIndex]\n    };\n\n    // Filter out the mapping for this field\n    formMapping.mappings = formMapping.mappings.filter(m => m.targetField !== targetField);\n    if (formMapping.mappings.length === 0) {\n      // If no more mappings for this form, remove the form mapping\n      updatedMappings.splice(formMappingIndex, 1);\n    } else {\n      updatedMappings[formMappingIndex] = formMapping;\n    }\n  }\n  return updatedMappings;\n};\n\n/**\n * Find mapping for a specific field\n */\nexport const findFieldMapping = (mappings, targetFormId, targetField) => {\n  const formMapping = mappings.find(m => m.targetFormId === targetFormId);\n  if (!formMapping) {\n    return undefined;\n  }\n  return formMapping.mappings.find(m => m.targetField === targetField);\n};\n\n/**\n * Get all mappings for a form\n */\nexport const getFormMappings = (mappings, targetFormId) => {\n  const formMapping = mappings.find(m => m.targetFormId === targetFormId);\n  if (!formMapping) {\n    return {};\n  }\n  return formMapping.mappings.reduce((acc, mapping) => {\n    acc[mapping.targetField] = {\n      sourceType: mapping.sourceType,\n      sourceFormId: mapping.sourceFormId,\n      sourceField: mapping.sourceField\n    };\n    return acc;\n  }, {});\n};","map":{"version":3,"names":["getDisplayText","mapping","sourceType","sourceField","sourceFormId","updateMapping","mappings","targetFormId","targetField","updatedMappings","formMappingIndex","findIndex","m","formMapping","fieldMappingIndex","newFieldMapping","displayText","push","removeMapping","filter","length","splice","findFieldMapping","find","undefined","getFormMappings","reduce","acc"],"sources":["/Users/fawaz/dev/4fc05d/src/services/prefillService.ts"],"sourcesContent":["// src/services/prefillService.ts\nimport { FieldMapping, PrefillMapping } from '../types';\n\n/**\n * Get display text for a mapping\n */\nexport const getDisplayText = (mapping: FieldMapping): string => {\n  if (mapping.sourceType === 'global') {\n    return `Global: ${mapping.sourceField}`;\n  } else {\n    return `Form: ${mapping.sourceFormId}.${mapping.sourceField}`;\n  }\n};\n\n/**\n * Add or update a mapping\n */\nexport const updateMapping = (\n  mappings: PrefillMapping[],\n  targetFormId: string,\n  targetField: string,\n  sourceType: 'form' | 'global',\n  sourceFormId: string | undefined,\n  sourceField: string\n): PrefillMapping[] => {\n  const updatedMappings = [...mappings];\n\n  // Find if we already have mappings for this form\n  const formMappingIndex = updatedMappings.findIndex(\n    (m) => m.targetFormId === targetFormId\n  );\n\n  if (formMappingIndex >= 0) {\n    const formMapping = { ...updatedMappings[formMappingIndex] };\n\n    // Find if we already have a mapping for this field\n    const fieldMappingIndex = formMapping.mappings.findIndex(\n      (m) => m.targetField === targetField\n    );\n\n    const newFieldMapping: FieldMapping = {\n      targetField,\n      sourceType,\n      sourceFormId,\n      sourceField,\n      displayText:\n        sourceType === 'global'\n          ? `Global: ${sourceField}`\n          : `Form: ${sourceFormId}.${sourceField}`,\n    };\n\n    if (fieldMappingIndex >= 0) {\n      // Update existing field mapping\n      const updatedMappings = [...formMapping.mappings];\n      updatedMappings[fieldMappingIndex] = newFieldMapping;\n      formMapping.mappings = updatedMappings;\n    } else {\n      // Add new field mapping\n      formMapping.mappings = [...formMapping.mappings, newFieldMapping];\n    }\n\n    updatedMappings[formMappingIndex] = formMapping;\n  } else {\n    // Add new form mapping\n    updatedMappings.push({\n      targetFormId,\n      mappings: [\n        {\n          targetField,\n          sourceType,\n          sourceFormId,\n          sourceField,\n          displayText:\n            sourceType === 'global'\n              ? `Global: ${sourceField}`\n              : `Form: ${sourceFormId}.${sourceField}`,\n        },\n      ],\n    });\n  }\n\n  return updatedMappings;\n};\n\n/**\n * Remove a mapping\n */\nexport const removeMapping = (\n  mappings: PrefillMapping[],\n  targetFormId: string,\n  targetField: string\n): PrefillMapping[] => {\n  const updatedMappings = [...mappings];\n\n  const formMappingIndex = updatedMappings.findIndex(\n    (m) => m.targetFormId === targetFormId\n  );\n\n  if (formMappingIndex >= 0) {\n    const formMapping = { ...updatedMappings[formMappingIndex] };\n\n    // Filter out the mapping for this field\n    formMapping.mappings = formMapping.mappings.filter(\n      (m) => m.targetField !== targetField\n    );\n\n    if (formMapping.mappings.length === 0) {\n      // If no more mappings for this form, remove the form mapping\n      updatedMappings.splice(formMappingIndex, 1);\n    } else {\n      updatedMappings[formMappingIndex] = formMapping;\n    }\n  }\n\n  return updatedMappings;\n};\n\n/**\n * Find mapping for a specific field\n */\nexport const findFieldMapping = (\n  mappings: PrefillMapping[],\n  targetFormId: string,\n  targetField: string\n): FieldMapping | undefined => {\n  const formMapping = mappings.find((m) => m.targetFormId === targetFormId);\n\n  if (!formMapping) {\n    return undefined;\n  }\n\n  return formMapping.mappings.find((m) => m.targetField === targetField);\n};\n\n/**\n * Get all mappings for a form\n */\nexport const getFormMappings = (\n  mappings: PrefillMapping[],\n  targetFormId: string\n): Record<\n  string,\n  { sourceType: 'form' | 'global'; sourceFormId?: string; sourceField: string }\n> => {\n  const formMapping = mappings.find((m) => m.targetFormId === targetFormId);\n\n  if (!formMapping) {\n    return {};\n  }\n\n  return formMapping.mappings.reduce((acc, mapping) => {\n    acc[mapping.targetField] = {\n      sourceType: mapping.sourceType,\n      sourceFormId: mapping.sourceFormId,\n      sourceField: mapping.sourceField,\n    };\n    return acc;\n  }, {} as Record<string, { sourceType: 'form' | 'global'; sourceFormId?: string; sourceField: string }>);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}